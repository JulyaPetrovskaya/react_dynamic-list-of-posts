{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/comments.ts","components/NewCommentForm.tsx","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","e","preventDefault","togglePost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","deleteComment","commentId","createComment","email","name","NewCommentForm","setComments","useState","text","formFields","setFormFields","isNameError","isEmailError","isTextError","formErrors","setFormErrors","isLoading","setIsLoading","addComment","useCallback","commentPostId","a","newComment","currComment","currentComments","catch","error","OnSumbmitHandler","trim","currValue","currFields","onSubmit","htmlFor","placeholder","value","onChange","target","CommentItem","comment","deleteCommentFunction","href","PostDetails","comments","isError","setIsError","formIsActive","setFormIsActive","getCommentsFunction","useEffect","filter","length","UserSelector","users","selectedUser","setSelectedUser","dropDownActive","setDropDownActive","dropdown","useRef","closeDropdown","current","contains","document","addEventListener","removeEventListener","ref","role","user","handlerUserSelection","App","setUsers","setPosts","GetUsersFunction","GetPostsFunction","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d4b1936c.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const togglePost = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    post: Post,\n  ) => {\n    e.preventDefault();\n\n    if (post.id === selectedPost?.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            posts.map(post => (\n              <>\n                <tr data-cy=\"Post\">\n                  <td data-cy=\"PostId\">{post.id}</td>\n\n                  <td data-cy=\"PostTitle\">\n                    {post.title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames('button is-link', {\n                        'is-light': post.id !== selectedPost?.id,\n                      })}\n                      onClick={(e) => togglePost(e, post)}\n                    >\n                      {post.id !== selectedPost?.id\n                        ? 'Open'\n                        : 'Close'}\n                    </button>\n                  </td>\n                </tr>\n              </>\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (\n  {\n    email,\n    name,\n    postId,\n    body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    email, name, postId, body,\n  });\n};\n","import React, { useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { createComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\ntype FormFields = {\n  name: string;\n  email: string;\n  text: string;\n};\n\ntype FormErrors = {\n  isNameError: boolean;\n  isEmailError: boolean;\n  isTextError: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n}) => {\n  const [formFields, setFormFields] = useState<FormFields>({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const [formErrors, setFormErrors] = useState<FormErrors>({\n    isNameError: false,\n    isEmailError: false,\n    isTextError: false,\n  });\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const addComment = useCallback(async (\n    email: string,\n    body: string,\n    name: string,\n    commentPostId: number,\n  ) => {\n    const newComment: Omit<Comment, 'id'> = {\n      email,\n      body,\n      name,\n      postId: commentPostId,\n    };\n\n    return createComment(newComment)\n      .then(currComment => {\n        setComments(\n          (currentComments: Comment[]) => [\n            ...currentComments,\n            currComment,\n          ],\n        );\n      })\n      .catch((error) => {\n        throw error;\n      });\n  }, [setComments]);\n\n  const OnSumbmitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!formFields.name.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isNameError: true }));\n    }\n\n    if (!formFields.email.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isEmailError: true }));\n    }\n\n    if (!formFields.text.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isTextError: true }));\n    }\n\n    if (!formFields.name.trim()\n    || !formFields.email.trim()\n    || !formFields.text.trim()\n    ) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      await addComment(\n        formFields.name,\n        formFields.email,\n        formFields.text,\n        postId,\n      );\n    } finally {\n      setIsLoading(false);\n      setFormFields(currFields => ({\n        ...currFields,\n        text: '',\n      }));\n    }\n  };\n\n  const changNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      name: e.target.value,\n    }));\n\n    if (e.target.value.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isNameError: false }));\n    }\n  };\n\n  const changEmailHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      email: e.target.value,\n    }));\n\n    if (e.target.value.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isEmailError: false }));\n    }\n  };\n\n  const changTextHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      text: e.target.value,\n    }));\n\n    if (e.target.value.trim()) {\n      setFormErrors(currValue => ({ ...currValue, isTextError: false }));\n    }\n  };\n\n  const resetFields = () => {\n    setFormFields({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setFormErrors({\n      isNameError: false,\n      isEmailError: false,\n      isTextError: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={OnSumbmitHandler}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formErrors.isNameError,\n            })}\n            value={formFields.name}\n            onChange={changNameHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formErrors.isEmailError,\n            })}\n            value={formFields.email}\n            onChange={changEmailHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': formErrors.isTextError,\n            })}\n            value={formFields.text}\n            onChange={changTextHandler}\n          />\n        </div>\n\n        {formErrors.isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            onClick={resetFields}\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  deleteCommentFunction: (commentId: number) => Promise<void>;\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  deleteCommentFunction,\n}) => {\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => deleteCommentFunction(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentItem } from './CommentItem';\nimport { getComments, deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [formIsActive, setFormIsActive] = useState(false);\n\n  const getCommentsFunction = async (postId: number) => {\n    try {\n      setComments(await getComments(postId));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setFormIsActive(false);\n\n    getCommentsFunction(post.id);\n  }, [post]);\n\n  const deleteCommentFunction = useCallback(async (commentId: number) => {\n    setComments(currentComments => currentComments\n      .filter(currComment => currComment.id !== commentId));\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setIsError(true);\n    }\n  }, []);\n\n  const toggleFormActive = () => {\n    setFormIsActive(currValue => !currValue);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading\n            ? <Loader />\n            : (\n              <>\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n\n                {!isLoading && !isError && !comments.length && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                {!isLoading && !isError && !!comments.length && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {\n                      comments.map(comment => (\n                        <CommentItem\n                          key={comment.id}\n                          comment={comment}\n                          deleteCommentFunction={deleteCommentFunction}\n                        />\n                      ))\n                    }\n                  </>\n                )}\n\n                {!isLoading && !isError && !formIsActive && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={toggleFormActive}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n        </div>\n\n        {formIsActive && (\n          <NewCommentForm\n            postId={post.id}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropDownActive, setDropDownActive] = useState(false);\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const closeDropdown = (e: MouseEvent) => {\n      if (dropdown.current\n        && dropDownActive\n        && !dropdown.current.contains(e.target as Node)) {\n        setDropDownActive(false);\n      }\n    };\n\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [dropDownActive]);\n\n  const handlerUserSelection = (user: User) => {\n    setSelectedUser(user);\n    setDropDownActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropDownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\" ref={dropdown}>\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropDownActive(currValue => !currValue)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handlerUserSelection(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const GetUsersFunction = async () => {\n    try {\n      setUsers(await getUsers());\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const GetPostsFunction = async (user: User) => {\n    try {\n      setPosts(await getPosts(user.id));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    GetUsersFunction();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      setIsLoading(true);\n      GetPostsFunction(selectedUser);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                { isLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {isError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {!posts.length && selectedUser && !isError && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {!!posts.length && selectedUser && !isError && (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}